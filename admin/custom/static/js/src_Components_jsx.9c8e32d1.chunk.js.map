{"version":3,"file":"static/js/src_Components_jsx.9c8e32d1.chunk.js","mappings":"21BA8CA,MAAMA,EAAS,CACX,MAAO,CACH,SAAU,GACd,EACA,OAAQ,CACJ,SAAU,GACV,WAAY,MAChB,EACA,GAAI,CACA,MAAO,SACX,EACA,KAAM,CACF,MAAO,SACX,EACA,MAAO,CACH,MAAO,SACX,EACA,KAAM,CACF,QAAS,SACb,EACA,SAAU,CACN,MAAO,EACX,EACA,UAAW,CACP,MAAO,EACX,EACA,QAAS,CACL,MAAO,GACX,EACA,OAAQ,CAER,EACA,SAAU,CAEV,EACA,QAAS,CACL,MAAO,EACX,EACA,QAAS,CACL,MAAO,GACP,UAAW,QACf,EACA,QAAS,CACL,MAAO,GACP,UAAW,QACf,EACA,SAAU,CACN,MAAO,EACX,EACA,QAAS,CACL,MAAO,EACX,EACA,iBAAkB,CACd,MAAO,GACP,UAAW,QACf,EACA,cAAe,CACX,MAAO,EACX,EACA,UAAW,CACP,MAAO,EACX,EACA,UAAW,CACP,MAAO,EACX,EACA,YAAa,CACT,MAAO,EACX,EACA,WAAY,CACR,MAAO,IACP,UAAW,OACf,EACA,WAAY,CACR,gBAAiB,SACrB,EACA,YAAa,CACT,YAAa,EACjB,EACA,KAAM,CACF,MAAO,GACP,WAAY,EAChB,EACA,MAAO,CACH,MAAO,oBACX,EACA,OAAQ,CAER,EACA,SAAUC,IAAU,CAChB,aAAc,CACV,MAAO,OACP,OAAQ,IACR,OAAQ,OACR,gBAAiBA,EAAM,QAAQ,OAAS,OAAS,OAAS,OAC1D,MAAOA,EAAM,QAAQ,OAAS,OAAS,OAAS,MACpD,CACJ,GACA,MAAO,CACH,MAAO,GACX,EACA,cAAeA,IAAU,CACrB,UAAW,CACP,MAAOA,EAAM,QAAQ,OAAS,OAAS,OAAS,OAChD,UAAW,uCACf,EACA,UAAW,CACP,MAAOA,EAAM,QAAQ,OAAS,OAAS,OAAS,OAChD,UAAW,uCACf,CACJ,EACJ,EAEA,MAAMC,UAAwB,eAAc,CACxC,YAAYC,EAAO,CACf,MAAMA,CAAK,EA2Df,wBAAiB,CAACC,EAAIC,IAAQ,CAC1B,GAAI,CAACD,EACD,OAEJ,MAAME,EAAQ,KAAK,MAAM,KAAK,UAAU,KAAK,MAAM,KAAK,CAAC,EACnDC,EAAYD,EAAM,UAAUE,GAAQA,EAAK,KAAOJ,CAAE,EACxD,GAAI,CAACC,EAEGE,IAAc,KACdD,EAAM,OAAOC,EAAW,CAAC,EACzB,KAAK,SAAS,CAAE,MAAAD,CAAM,CAAC,OAExB,CAEH,GAAIC,IAAc,IAsBd,GArBAD,EAAMC,CAAS,EAAI,CACf,GAAAH,EACA,KAAMA,EAAG,UAAU,KAAK,UAAU,MAAM,EACxC,OAAe,CACX,QAASC,EAAI,OAAO,UAAY,GAChC,KAAMA,EAAI,OAAO,KACjB,KAAMA,EAAI,OAAO,KACjB,KAAMA,EAAI,OAAO,IACrB,EACA,OAAQ,CACJ,KAAMA,EAAI,OAAO,KACjB,KAAMA,EAAI,OAAO,MAAQ,EACzB,MAAOA,EAAI,OAAO,MAClB,SAAUA,EAAI,OAAO,SACrB,WAAYA,EAAI,OAAO,WACvB,cAAeA,EAAI,OAAO,cAC1B,OAAQA,EAAI,OAAO,OACnB,OAAQA,EAAI,OAAO,OACnB,UAAWA,EAAI,OAAO,SAC1B,CACJ,EACI,KAAK,UAAU,KAAK,MAAM,MAAME,CAAS,CAAC,IAAM,KAAK,UAAUD,EAAMC,CAAS,CAAC,EAC/E,YAIJD,EAAM,KAAK,CACP,GAAAF,EACA,KAAMA,EAAG,UAAU,KAAK,UAAU,MAAM,EACxC,OAAe,CACX,QAASC,EAAI,OAAO,UAAY,GAChC,KAAMA,EAAI,OAAO,KACjB,KAAMA,EAAI,OAAO,KACjB,KAAMA,EAAI,OAAO,IACrB,EACA,OAAQ,CACJ,KAAMA,EAAI,OAAO,KACjB,KAAMA,EAAI,OAAO,MAAQ,EACzB,MAAOA,EAAI,OAAO,MAClB,SAAUA,EAAI,OAAO,SACrB,WAAYA,EAAI,OAAO,WACvB,cAAeA,EAAI,OAAO,cAC1B,OAAQA,EAAI,OAAO,OACnB,OAAQA,EAAI,OAAO,OACnB,UAAWA,EAAI,OAAO,SAC1B,CACJ,CAAC,EAELC,EAAM,KAAK,CAACG,EAAGC,IAAMD,EAAE,KAAK,cAAcC,EAAE,IAAI,CAAC,EAEjD,KAAK,SAAS,CAAE,MAAAJ,CAAM,CAAC,CAC3B,CACJ,CAAC,EAED,uBAAgB,CAACF,EAAIO,IAAU,CACvBP,IAAO,kBAAkB,KAAK,SAAS,SAAW,KAAK,MAAM,QAAU,CAAC,EAACO,GAAA,MAAAA,EAAO,MAChF,KAAK,SAAS,CAAE,MAAO,CAAC,EAACA,GAAA,MAAAA,EAAO,IAAI,CAAC,CAE7C,CAAC,EAnIG,KAAK,MAAQ,CACT,eAAgB,KAChB,KAAM,KAAK,MAAM,KAAK,UAAUR,EAAM,IAAI,CAAC,EAC3C,MAAO,KACP,MAAO,KACP,iBAAkB,KAClB,SAAU,YACV,WAAY,GACZ,QAAS,CAAC,EACV,YAAa,EACb,MAAO,EACX,EACA,KAAK,UAAY,GAAG,KAAK,MAAM,WAAW,IAAI,KAAK,MAAM,QAAQ,IACjE,KAAK,YAAc,cAAgB,CACvC,CAEA,mBAAoB,CAChB,MAAM,kBAAkB,EACxB,KAAK,MAAM,OAAO,oBAAoB,QAAS,KAAK,UAAW,GAAG,KAAK,SAAS,QAAQ,EACnF,KAAKS,GAAQ,KAAK,MAAM,OAAO,SAAS,kBAAkB,KAAK,SAAS,OAAO,EAC3E,MAAM,IAAM,IAAI,EAChB,KAAKD,GAAS,CACX,MAAML,EAAQ,OAAO,KAAKM,CAAI,EAAE,IAAIR,IAAO,CACvC,GAAAA,EACA,KAAMA,EAAG,UAAU,KAAK,UAAU,MAAM,EACxC,OAAQ,CACJ,QAASQ,EAAKR,CAAE,EAAE,OAAO,UAAY,GACrC,KAAMQ,EAAKR,CAAE,EAAE,OAAO,KACtB,KAAMQ,EAAKR,CAAE,EAAE,OAAO,KACtB,KAAMQ,EAAKR,CAAE,EAAE,OAAO,IAC1B,EACA,OAAQ,CACJ,KAAMQ,EAAKR,CAAE,EAAE,OAAO,KACtB,KAAMQ,EAAKR,CAAE,EAAE,OAAO,MAAQ,EAC9B,MAAOQ,EAAKR,CAAE,EAAE,OAAO,MACvB,SAAUQ,EAAKR,CAAE,EAAE,OAAO,SAC1B,WAAYQ,EAAKR,CAAE,EAAE,OAAO,WAC5B,cAAeQ,EAAKR,CAAE,EAAE,OAAO,cAC/B,OAAQQ,EAAKR,CAAE,EAAE,OAAO,OACxB,OAAQQ,EAAKR,CAAE,EAAE,OAAO,OACxB,UAAWQ,EAAKR,CAAE,EAAE,OAAO,SAC/B,CACJ,EAAE,EACFE,EAAM,KAAK,CAACG,EAAGC,IAAMD,EAAE,KAAK,cAAcC,EAAE,IAAI,CAAC,EAEjD,KAAK,SAAS,CAAE,MAAAJ,EAAO,MAAOK,EAAQA,EAAM,IAAM,EAAM,CAAC,EACzD,KAAK,MAAM,OAAO,gBAAgB,GAAG,KAAK,SAAS,IAAK,KAAK,cAAc,EAC3E,KAAK,MAAM,OAAO,eAAe,kBAAkB,KAAK,SAAS,IAAK,KAAK,aAAa,CAC5F,CAAC,CAAC,CACd,CAEA,sBAAuB,CACnB,KAAK,MAAM,OAAO,kBAAkB,GAAG,KAAK,SAAS,IAAK,KAAK,cAAc,EAC7E,KAAK,MAAM,OAAO,iBAAiB,kBAAkB,KAAK,SAAS,IAAK,KAAK,aAAa,EAC1F,KAAK,WAAa,aAAa,KAAK,SAAS,EAC7C,KAAK,UAAY,IACrB,CA6EA,YAAYE,EAAM,CACV,KAAK,MAAM,OACX,KAAK,MAAM,OAAO,OAAO,GAAG,KAAK,MAAM,WAAW,IAAI,KAAK,MAAM,QAAQ,GAAI,OAAQA,CAAI,EACpF,KAAKC,GAAU,CACRA,IACIA,EAAO,MACP,OAAO,MAAMA,EAAO,KAAK,EAEzB,KAAK,SAAS,CAAE,SAAUA,EAAO,MAAQ,EAAE,CAAC,EAGxD,CAAC,CAEb,CAEA,kBAAmB,CACf,GAAI,CAAC,KAAK,MAAM,eACZ,OAAO,KAGX,MAAMN,EAAO,KAAK,MAAM,eACxB,OAAO,kBAAC,UACJ,IAAI,SACJ,SAAS,KACT,UAAS,GACT,KAAM,GACN,QAAS,IAAM,CAAC,EAChB,GAAI,CAAE,qBAAsBR,EAAO,MAAO,GAE1C,kBAAC,cAAW,KACP,OAAK,EAAE,mBAAmB,EAAE,IAC7B,kBAAC,QACG,MAAO,CAAE,UAAW,SAAU,WAAY,OAAQ,WAAY,EAAG,GAEhE,KAAK,MAAM,eAAe,IAC/B,CACJ,EACA,kBAAC,gBAAa,KACV,kBAAC,OAAI,CAAC,UAAS,GAAC,QAAS,GACrB,kBAAC,OAAI,CAAC,KAAI,GAAC,GAAI,IACX,kBAAC,cAAW,CAAC,QAAQ,WAAW,MAAOA,EAAO,aAC1C,kBAAC,aAAU,KAAE,OAAK,EAAE,aAAa,CAAE,EACnC,kBAAC,UACG,MAAOQ,EAAK,OAAO,MAAQ,SAC3B,SAAUO,GAAK,CACX,MAAMC,EAAU,KAAK,MAAM,KAAK,UAAUR,CAAI,CAAC,EAC/CQ,EAAQ,OAAO,KAAOD,EAAE,OAAO,MAC/B,KAAK,SAAS,CAAE,eAAgBC,CAAQ,EAAG,IAAM,KAAK,OAAO,CAAC,CAClE,EACA,QAAQ,YAER,kBAAC,WAAQ,CAAC,MAAM,WAAU,SAAO,EACjC,kBAAC,WAAQ,CAAC,MAAM,UAAS,QAAM,EAC/B,kBAAC,WAAQ,CAAC,MAAM,UAAS,QAAM,EAC/B,kBAAC,WAAQ,CAAC,MAAM,QAAO,MAAI,EAC3B,kBAAC,WAAQ,CAAC,MAAM,SAAQ,OAAK,CACjC,CACJ,EACCR,EAAK,OAAO,OAAS,SAClB,kBAAC,mBAAgB,CAAC,QACd,kBAAC,YACG,QAASA,EAAK,OAAO,cACrB,SAAU,IAAM,CACZ,MAAMQ,EAAU,KAAK,MAAM,KAAK,UAAUR,CAAI,CAAC,EAC/CQ,EAAQ,OAAO,MAAQ,CAACA,EAAQ,OAAO,MACvC,KAAK,SAAS,CAAE,eAAgBA,CAAQ,EAAG,IAAM,KAAK,OAAO,CAAC,CAClE,EACJ,EACF,MAAO,OAAK,EAAE,cAAc,EAAG,EAAK,IAC9C,EACA,kBAAC,OAAI,CAAC,KAAI,GAAC,GAAI,IACX,kBAAC,oBACG,MAAO,OAAK,EAAE,+DAA+D,EAC7E,MAAOhB,EAAO,YACd,QACI,kBAAC,YACG,QAASQ,EAAK,OAAO,cACrB,SAAU,IAAM,CACZ,MAAMQ,EAAU,KAAK,MAAM,KAAK,UAAUR,CAAI,CAAC,EAC/CQ,EAAQ,OAAO,cAAgB,CAACA,EAAQ,OAAO,cAC/C,KAAK,SAAS,CAAE,eAAgBA,CAAQ,EAAG,IAAM,KAAK,OAAO,CAAC,CAClE,EACJ,EAEJ,MAAO,OAAK,EAAE,6BAA6B,EAC/C,EACER,EAAK,OAAO,cAYL,KAXL,kBAAC,aACG,MAAO,OAAK,EAAE,sDAAsD,EACpE,MAAO,OAAKR,EAAO,WAAW,EAAKA,EAAO,KAAK,EAC/C,MAAOQ,EAAK,OAAO,YAAc,GACjC,SAAUO,GAAK,CACX,MAAMC,EAAU,KAAK,MAAM,KAAK,UAAUR,CAAI,CAAC,EAC/CQ,EAAQ,OAAO,WAAaD,EAAE,OAAO,MACrC,KAAK,SAAS,CAAE,eAAgBC,CAAQ,EAAG,IAAM,KAAK,OAAO,CAAC,CAClE,EACA,MAAO,OAAK,EAAE,yBAAyB,EACvC,QAAQ,WACZ,EAEHR,EAAK,OAAO,OAAS,SAClB,kBAAC,aACG,MAAO,OAAKR,EAAO,WAAW,EAAKA,EAAO,KAAK,EAC/C,MAAOQ,EAAK,OAAO,QAAU,EAC7B,SAAUO,GAAK,CACX,MAAMC,EAAU,KAAK,MAAM,KAAK,UAAUR,CAAI,CAAC,EAC/CQ,EAAQ,OAAO,OAASD,EAAE,OAAO,MACjC,KAAK,SAAS,CAAE,eAAgBC,CAAQ,EAAG,IAAM,KAAK,OAAO,CAAC,CAClE,EACA,QAAQ,WACR,MAAO,OAAK,EAAE,eAAe,EACjC,EAAK,KACRR,EAAK,OAAO,OAAS,SAClB,kBAAC,aACG,MAAO,OAAKR,EAAO,WAAW,EAAKA,EAAO,KAAK,EAC/C,MAAOQ,EAAK,OAAO,QAAU,EAC7B,SAAUO,GAAK,CACX,MAAMC,EAAU,KAAK,MAAM,KAAK,UAAUR,CAAI,CAAC,EAC/CQ,EAAQ,OAAO,OAASD,EAAE,OAAO,MACjC,KAAK,SAAS,CAAE,eAAgBC,CAAQ,EAAG,IAAM,KAAK,OAAO,CAAC,CAClE,EACA,MAAO,OAAK,EAAE,eAAe,EAC7B,QAAQ,WACZ,EAAK,KACRR,EAAK,OAAO,OAAS,SAClB,kBAAC,oBACG,MAAO,OAAK,EAAE,qCAAqC,EACnD,MAAOR,EAAO,YACd,QACI,kBAAC,YACG,QAASQ,EAAK,OAAO,UACrB,SAAU,IAAM,CACZ,MAAMQ,EAAU,KAAK,MAAM,KAAK,UAAUR,CAAI,CAAC,EAC/CQ,EAAQ,OAAO,UAAY,CAACA,EAAQ,OAAO,UAC3C,KAAK,SAAS,CAAE,eAAgBA,CAAQ,EAAG,IAAM,KAAK,OAAO,CAAC,CAClE,EACJ,EAEJ,MAAO,OAAK,EAAE,wBAAwB,EAC1C,EAAK,IACb,EACA,kBAAC,OAAI,CAAC,KAAI,GAAC,GAAI,IACX,kBAAC,aACG,MAAOR,EAAK,OAAO,OAAS,GAC5B,SAAUO,GAAK,CACX,MAAMC,EAAU,KAAK,MAAM,KAAK,UAAUR,CAAI,CAAC,EAC/CQ,EAAQ,OAAO,MAAQD,EAAE,OAAO,MAChC,KAAK,SAAS,CAAE,eAAgBC,CAAQ,EAAG,IAAM,KAAK,OAAO,CAAC,CAClE,EACA,QAAQ,WACR,MAAOhB,EAAO,MACd,MAAO,OAAK,EAAE,cAAc,EAChC,EACCQ,EAAK,OAAO,OAAS,QAAU,kBAAC,aAC7B,MAAOA,EAAK,OAAO,MAAQ,EAC3B,KAAK,SACL,IAAK,EACL,SAAUO,GAAK,CACX,MAAMC,EAAU,KAAK,MAAM,KAAK,UAAUR,CAAI,CAAC,EAC/CQ,EAAQ,OAAO,KAAOD,EAAE,OAAO,MAC/B,KAAK,SAAS,CAAE,eAAgBC,CAAQ,EAAG,IAAM,KAAK,OAAO,CAAC,CAClE,EACA,QAAQ,WACR,MAAOhB,EAAO,KACd,MAAO,OAAK,EAAE,aAAa,EAC/B,EAAK,KACL,kBAAC,OACG,MAAM,UACN,KAAK,QACL,QAAS,IAAM,KAAK,OAAO,EAAI,GAE/B,kBAAC,YAAS,IAAC,CACf,CACJ,EACA,kBAAC,OAAI,CAAC,KAAI,GAAC,GAAI,GAAI,GAAIA,EAAO,UAC1B,kBAAC,YACG,IAAK,KAAK,YACV,MAAO,KAAK,MAAM,SAClB,SAAUe,GAAK,KAAK,SAAS,CAAE,SAAUA,EAAE,OAAO,KAAM,EAAG,IAAM,KAAK,OAAO,CAAC,EAClF,CACJ,EACA,kBAAC,OAAI,CAAC,KAAI,GAAC,GAAI,IACX,kBAAC,aACG,GAAIf,EAAO,cACX,IAAK,KAAK,MAAM,YAChB,QAAQ,WACR,MAAO,OAAK,EAAE,eAAe,EAC7B,MAAO,KAAK,MAAM,WAAW,SAAS,EACtC,SAAQ,GACR,UAAS,GACb,CACJ,CACJ,CACJ,EACA,kBAAC,gBAAa,KACV,kBAAC,UACG,SAAU,KAAK,UAAU,KAAK,MAAM,cAAc,IAAM,KAAK,MAAM,aACnE,QAAS,IAAM,CACX,MAAMM,EAAQ,KAAK,MAAM,KAAK,UAAU,KAAK,MAAM,KAAK,CAAC,EACnDW,EAAQX,EAAM,UAAU,GAAK,EAAE,KAAOE,EAAK,EAAE,EACnD,OAAO,OAAOF,EAAMW,CAAK,EAAE,OAAQ,KAAK,MAAM,eAAe,MAAM,EACnE,OAAO,OAAOX,EAAMW,CAAK,EAAE,OAAQ,KAAK,MAAM,eAAe,MAAM,EACnE,KAAK,SAAS,CAAE,eAAgB,KAAM,aAAc,KAAM,MAAAX,CAAM,EAAG,IAC/D,KAAK,WAAWW,CAAK,CAAC,CAC9B,EACA,MAAM,UACN,UAAW,kBAAC,OAAI,IAAC,EACjB,QAAQ,aAEP,OAAK,EAAE,SAAS,CACrB,EACA,kBAAC,UACG,MAAM,OACN,QAAS,IAAM,KAAK,SAAS,CAAE,eAAgB,KAAM,aAAc,IAAK,CAAC,EACzE,QAAQ,YACR,UAAW,kBAAC,QAAK,IAAC,GAEjB,OAAK,EAAE,WAAW,CACvB,CACJ,CACJ,CACJ,CAEA,YAAa,CAET,MAAMC,EAAa,KAAK,MAAM,MAAM,UAAUV,GAAQ,CAACA,EAAK,IAAI,EAChE,GAAIU,IAAe,GACf,OAAOA,EAIX,QAASC,EAAI,EAAGA,EAAI,KAAK,MAAM,MAAM,OAAQA,IACzC,QAASC,EAAID,EAAI,EAAGC,EAAI,KAAK,MAAM,MAAM,OAAQA,IAC7C,GAAI,KAAK,MAAM,MAAMD,CAAC,EAAE,OAAS,KAAK,MAAM,MAAMC,CAAC,EAAE,KACjD,OAAOA,EAInB,MAAO,EACX,CAEA,WAAWH,EAAO,CACd,MAAMI,EAAS,CAAC,GAAG,KAAK,MAAM,OAAO,EAChCA,EAAQ,SAASJ,CAAK,IACvBI,EAAQ,KAAKJ,CAAK,EAClB,KAAK,SAAS,CAAE,QAAAI,CAAQ,CAAC,GAG7B,KAAK,WAAa,aAAa,KAAK,SAAS,EAC7C,KAAK,UAAY,WAAW,IAAY,wBACpC,KAAK,UAAY,KACjB,QAASC,EAAI,EAAGA,EAAI,KAAK,MAAM,QAAQ,OAAQA,IAAK,CAChD,MAAMC,EAAS,KAAK,MAAM,QAAQD,CAAC,EAC7Bd,EAAO,KAAK,MAAM,MAAMe,CAAM,EAEpC,GAAIf,EAAK,MAAQ,CAAC,KAAK,MAAM,MAAM,KAAK,CAACgB,EAAG,IAAMA,EAAE,OAAShB,EAAK,MAAQ,IAAMe,CAAM,EAAG,CACrF,MAAME,EAAcjB,EAAK,GAAK,MAAM,KAAK,MAAM,OAAO,UAAUA,EAAK,EAAE,EAAI,CAAE,OAAQ,CAAC,EAAG,OAAQ,CAAC,EAAG,KAAM,OAAQ,EAC7GH,EAAM,KAAK,MAAM,KAAK,UAAUoB,CAAW,CAAC,EAClD,OAAO,OAAOpB,EAAI,OAAQG,EAAK,MAAM,EACrC,OAAO,OAAOH,EAAI,OAAQG,EAAK,MAAM,EAGjCA,EAAK,KAAO,GAAG,KAAK,SAAS,GAAGA,EAAK,IAAI,IACzCA,EAAK,KAAO,MAAM,KAAK,MAAM,OAAO,UAAUA,EAAK,EAAE,GACrD,MAAM,KAAK,MAAM,OAAO,UAAU,GAAG,KAAK,SAAS,GAAGA,EAAK,IAAI,GAAIH,CAAG,IAElE,KAAK,UAAUoB,EAAY,MAAM,IAAM,KAAK,UAAUpB,EAAI,MAAM,GAChE,KAAK,UAAUoB,EAAY,MAAM,IAAM,KAAK,UAAUpB,EAAI,MAAM,KAEhE,MAAM,KAAK,MAAM,OAAO,UAAUG,EAAK,GAAIH,CAAG,EAG1D,CACJ,CACA,KAAK,SAAS,CAAE,QAAS,CAAC,CAAE,CAAC,CACjC,CAAC,EAAE,GAAI,CACX,CAEA,UAAUY,EAAOS,EAAUC,EAAMC,EAAO,CACpC,MAAMtB,EAAQ,KAAK,MAAM,KAAK,UAAU,KAAK,MAAM,KAAK,CAAC,EACnDuB,EAAUH,EAAW,SAAW,SAClCC,IAAS,UACTrB,EAAMW,CAAK,EAAE,OAAO,KAAO,UAE/BX,EAAMW,CAAK,EAAEY,CAAO,EAAEF,CAAI,EAAIC,EAC9B,KAAK,SAAS,CAAE,MAAAtB,CAAM,EAAG,IAAM,KAAK,WAAWW,CAAK,CAAC,CACzD,CAEA,WAAWT,EAAMS,EAAOa,EAAWC,EAAkBC,EAAa,CAC9D,MAAMC,EAAQ,CAACzB,EAAK,MAAQ,KAAK,MAAM,MAAM,KAAK,CAACgB,EAAGL,IAAMK,EAAE,OAAShB,EAAK,MAAQW,IAAMF,CAAK,EAE/F,OAAO,kBAAC,YACJ,IAAK,GAAGA,CAAK,IAAIT,EAAK,EAAE,GACxB,MAAO,KAAK,MAAM,QAAQ,SAASS,CAAK,EAAIjB,EAAO,WAAa,QAEhE,kBAAC,YAAS,CAAC,MAAOA,EAAO,MAAOiB,EAAQ,CAAE,EAC1C,kBAAC,YAAS,CAAC,MAAOjB,EAAO,MACrB,kBAAC,YACG,SAAUiC,EACV,QAASzB,EAAK,OAAO,QACrB,SAAUO,GAAK,KAAK,UAAUE,EAAO,GAAO,UAAWF,EAAE,OAAO,OAAO,EAC3E,CACJ,EACA,kBAAC,YAAS,CAAC,MAAOf,EAAO,MACrB,kBAAC,aACG,UAAS,GACT,MAAOQ,EAAK,KACZ,MAAO,CAAC,CAACyB,EACT,SAAU,CAACzB,EAAK,OAAO,QACvB,SAAUO,GAAK,CACX,MAAMT,EAAQ,KAAK,MAAM,KAAK,UAAU,KAAK,MAAM,KAAK,CAAC,EACzDA,EAAMW,CAAK,EAAE,KAAOF,EAAE,OAAO,MAC7B,MAAMkB,EAAQ,KAAK,WAAW,EAC9B,KAAK,SAAS,CAAE,MAAA3B,EAAO,MAAA2B,CAAM,EAAG,IAAM,KAAK,WAAWhB,CAAK,CAAC,CAChE,EACA,QAAQ,WACZ,CACJ,EACA,kBAAC,YAAS,CAAC,MAAOjB,EAAO,MACrB,kBAAC,aACG,UAAS,GACT,SAAUiC,GAAS,CAACzB,EAAK,OAAO,QAChC,MAAOA,EAAK,OAAO,KACnB,SAAUO,GAAK,KAAK,UAAUE,EAAO,GAAM,OAAQF,EAAE,OAAO,KAAK,EACjE,QAAQ,WACZ,CACJ,EACA,kBAAC,YAAS,CAAC,MAAOf,EAAO,MACrB,kBAAC,aACG,SAAUiC,GAAS,CAACzB,EAAK,OAAO,QAChC,UAAS,GACT,MAAOA,EAAK,OAAO,MACnB,SAAUO,GAAK,KAAK,UAAUE,EAAO,GAAM,QAASF,EAAE,OAAO,KAAK,EAClE,QAAQ,WACZ,CACJ,EACCiB,EAAc,kBAAC,YAAS,CAAC,MAAOhC,EAAO,MACnCQ,EAAK,OAAO,OAAS,QAAU,kBAAC,aAC7B,UAAS,GACT,SAAUyB,GAAS,CAACzB,EAAK,OAAO,QAChC,MAAOA,EAAK,OAAO,KACnB,KAAK,SACL,SAAUO,GAAK,KAAK,UAAUE,EAAO,GAAM,OAAQF,EAAE,OAAO,KAAK,EACjE,QAAQ,WACZ,EAAK,IACT,EAAe,KACf,kBAAC,YAAS,CAAC,MAAOf,EAAO,MACrB,kBAAC,UACG,UAAS,GACT,SAAUiC,GAAS,CAACzB,EAAK,OAAO,QAChC,MAAOA,EAAK,OAAO,MAAQ,GAC3B,SAAUO,GAAK,KAAK,UAAUE,EAAO,GAAO,OAAQF,EAAE,OAAO,KAAK,EAClE,QAAQ,YAER,kBAAC,WAAQ,CAAC,MAAM,SAAQ,SAAO,EAC/B,kBAAC,WAAQ,CAAC,MAAM,IAAG,QAAM,EACzB,kBAAC,WAAQ,CAAC,MAAM,eAAc,aAAW,EACzC,kBAAC,WAAQ,CAAC,MAAM,SAAQ,OAAK,EAC7B,kBAAC,WAAQ,CAAC,MAAM,UAAS,QAAM,EAC/B,kBAAC,WAAQ,CAAC,MAAM,UAAS,QAAM,EAC/B,kBAAC,WAAQ,CAAC,MAAM,aAAY,WAAS,CACzC,CACJ,EACA,kBAAC,YAAS,CAAC,MAAOf,EAAO,MACrB,kBAAC,UACG,UAAS,GACT,SAAUiC,GAAS,CAACzB,EAAK,OAAO,QAChC,MAAOA,EAAK,OAAO,MAAQ,SAC3B,SAAUO,GAAK,KAAK,UAAUE,EAAO,GAAO,OAAQF,EAAE,OAAO,KAAK,EAClE,QAAQ,YAER,kBAAC,WAAQ,CAAC,MAAM,WAAU,SAAO,EACjC,kBAAC,WAAQ,CAAC,MAAM,UAAS,QAAM,EAC/B,kBAAC,WAAQ,CAAC,MAAM,UAAS,QAAM,EAC/B,kBAAC,WAAQ,CAAC,MAAM,QAAO,MAAI,CAC/B,CACJ,EACCe,EAAY,kBAAC,YAAS,CAAC,MAAO9B,EAAO,MACjCQ,EAAK,OAAO,OAAS,SAClB,kBAAC,YACG,SAAUyB,GAAS,CAACzB,EAAK,OAAO,QAChC,QAAS,CAAC,CAACA,EAAK,OAAO,MACvB,SAAUO,GAAK,KAAK,UAAUE,EAAO,GAAM,QAASF,EAAE,OAAO,OAAO,EACxE,EAAK,IACb,EAAe,KACde,EAAY,kBAAC,YAAS,CAAC,MAAO9B,EAAO,MAClC,kBAAC,aACG,UAAS,GACT,SAAUiC,GAAS,CAACzB,EAAK,OAAO,QAChC,MAAOA,EAAK,OAAO,KACnB,SAAUO,GAAK,KAAK,UAAUE,EAAO,GAAO,OAAQF,EAAE,OAAO,KAAK,EAClE,QAAQ,WACZ,CACJ,EAAe,KACf,kBAAC,aACG,MAAOf,EAAO,KACd,MAAO,OAAK,EAAE,+DAA+D,GAE7E,kBAAC,YACG,SAAUiC,GAAS,CAACzB,EAAK,OAAO,QAChC,QAASA,EAAK,OAAO,cACrB,SAAUO,GAAK,KAAK,UAAUE,EAAO,GAAM,gBAAiBF,EAAE,OAAO,OAAO,EAChF,CACJ,EAECgB,EAAmB,kBAAC,aACjB,MAAO,OAAK,EAAE,sDAAsD,EACpE,MAAO/B,EAAO,MAEZQ,EAAK,OAAO,cAOL,KANL,kBAAC,aACG,SAAUyB,GAAS,CAACzB,EAAK,OAAO,QAChC,UAAS,GACT,MAAOA,EAAK,OAAO,cAAgB,GAAKA,EAAK,OAAO,WACpD,SAAUO,GAAK,KAAK,UAAUE,EAAO,GAAM,aAAcF,EAAE,OAAO,KAAK,EACvE,QAAQ,WACZ,CACR,EAAe,KACde,EAAY,kBAAC,YAAS,CAAC,MAAO9B,EAAO,MACjCQ,EAAK,OAAO,OAAS,SAClB,kBAAC,aACG,SAAUyB,GAAS,CAACzB,EAAK,OAAO,QAChC,UAAS,GACT,MAAOA,EAAK,OAAO,OACnB,SAAUO,GAAK,KAAK,UAAUE,EAAO,GAAM,SAAUF,EAAE,OAAO,KAAK,EACnE,QAAQ,WACZ,EAAK,IACb,EAAe,KACde,EAAY,kBAAC,YAAS,CAAC,MAAO9B,EAAO,MACjCQ,EAAK,OAAO,OAAS,SAClB,kBAAC,aACG,SAAUyB,GAAS,CAACzB,EAAK,OAAO,QAChC,UAAS,GACT,MAAOA,EAAK,OAAO,OACnB,SAAUO,GAAK,KAAK,UAAUE,EAAO,GAAM,SAAUF,EAAE,OAAO,KAAK,EACnE,QAAQ,WACZ,EAAK,IACb,EAAe,KACf,kBAAC,aACG,MAAO,OAAK,EAAE,sDAAsD,EACpE,MAAOf,EAAO,MAEd,kBAAC,aACG,SAAUiC,GAAS,CAACzB,EAAK,OAAO,QAChC,UAAS,GACT,MAAOA,EAAK,OAAO,SACnB,KAAK,SACL,SAAUO,GAAK,KAAK,UAAUE,EAAO,GAAM,WAAYF,EAAE,OAAO,KAAK,EACrE,QAAQ,WACZ,CACJ,EACA,kBAAC,YAAS,CAAC,MAAOf,EAAO,MACrB,kBAAC,cACG,KAAK,QACL,SAAUiC,GAAS,CAACzB,EAAK,OAAO,QAChC,QAAS,IACL,KAAK,SAAS,CACV,eAAgB,KAAK,MAAM,KAAK,UAAU,KAAK,MAAM,MAAMS,CAAK,CAAC,CAAC,EAAG,aAAc,KAAK,UAAU,KAAK,MAAM,MAAMA,CAAK,CAAC,CAC7H,EAAG,IAAM,KAAK,YAAY,KAAK,MAAM,MAAMA,CAAK,EAAE,OAAO,IAAI,CAAC,GAElE,kBAAC,OAAI,IAAC,CACV,EACA,kBAAC,cACG,KAAK,QACL,QAAS,IAAM,KAAK,SAAS,CAAE,iBAAkBA,CAAM,CAAC,GAExD,kBAAC,SAAM,IAAC,CACZ,EACA,kBAAC,cACG,KAAK,QACL,SAAUgB,GAAS,CAACzB,EAAK,OAAO,QAChC,QAAS,IAAY,wBACjB,MAAM0B,EAAS,KAAK,MAAM,KAAK,UAAU,KAAK,MAAM,MAAMjB,CAAK,CAAC,CAAC,EACjE,IAAIE,EAAI,EACJgB,EAAOD,EAAO,KAClB,MAAME,EAAUD,EAAK,MAAM,QAAQ,EAOnC,IANIC,GACAD,EAAOA,EAAK,QAAQC,EAAQ,CAAC,EAAG,EAAE,EAClCjB,EAAI,SAASiB,EAAQ,CAAC,EAAG,EAAE,EAAI,GAE/BD,GAAQ,IAEL,KAAK,MAAM,MAAM,KAAKE,GAAMA,EAAG,KAAK,MAAM,OAAO,KAAK,IAAMF,EAAOhB,EAAE,SAAS,CAAC,GAClFA,IAEJe,EAAO,KAAOC,EAAOhB,EAAE,SAAS,EAChCe,EAAO,GAAK,GAAG,KAAK,SAAS,GAAGA,EAAO,IAAI,GAE3C,MAAM,KAAK,MAAM,OAAO,UAAU,GAAG,KAAK,SAAS,GAAGA,EAAO,IAAI,GAAI,CACjE,KAAM,QACN,OAAQ1B,EAAK,OACb,OAAQA,EAAK,MACjB,CAAC,CACL,CAAC,CAAD,EAEA,kBAAC,cAAW,IAAC,CACjB,CACJ,CACJ,CACJ,CAEA,oBAAqB,CACjB,OAAI,KAAK,MAAM,mBAAqB,KACzB,KAEJ,kBAAC,WACJ,KAAM,OAAK,EAAE,oBAAoB,EACjC,GAAI,OAAK,EAAE,WAAW,EACtB,QAAeM,GAAU,wBAErB,GAAIA,EAAQ,CACR,MAAMV,EAAK,KAAK,MAAM,MAAM,KAAK,MAAM,gBAAgB,EAAE,GACnDE,EAAQ,KAAK,MAAM,KAAK,UAAU,KAAK,MAAM,KAAK,CAAC,EACzDA,EAAM,OAAO,KAAK,MAAM,iBAAkB,CAAC,EAC3C,KAAK,SAAS,CAAE,MAAAA,EAAO,iBAAkB,IAAK,EAAG,IAAY,wBACzDF,IAAO,MAAM,KAAK,MAAM,OAAO,UAAUA,CAAE,EAC/C,CAAC,EACL,MACI,KAAK,SAAS,CAAE,iBAAkB,IAAK,CAAC,CAEhD,CAAC,CAAD,CACJ,CACJ,CAEA,OAAOkC,EAAa,CAChB,KAAK,WAAa,aAAa,KAAK,SAAS,EAC7C,KAAK,UAAY,WAAW,IAAM,CAC9B,IAAIC,EAAa,KAAK,MAAM,SACxBC,EAAa,KAAK,MAAM,eAAe,OAAO,MAC9CC,EAAa,KAAK,MAAM,eAAe,OAAO,KAC9CC,EAAa,KAAK,MAAM,eAAe,OAAO,MAC9CC,EAAa,KAAK,MAAM,eAAe,OAAO,OAC9CC,EAAa,KAAK,MAAM,eAAe,OAAO,KAC9CC,EAAa,KAAK,MAAM,eAAe,OAAO,OAC9CC,EAAgB,KAAK,MAAM,eAAe,OAAO,YAAc,QAAU,KAAK,MAAM,eAAe,OAAO,YAAc,GACxHC,EAAa,KAAK,MAAM,eAAe,OAAO,WAE7CP,IACDA,EAAQ,MAGRA,EAAM,CAAC,IAAM,MACbA,EAAQA,EAAM,UAAU,EAAGA,EAAM,OAAS,CAAC,GAG3CO,IAAe,IAAMA,IAAe,QAAaA,IAAe,MAC5DA,IAAe,SACfA,EAAa,MAGbN,IAAS,SACTM,EAAa,WAAWA,CAAU,GAAK,EAChCN,IAAS,YACZM,IAAe,SACfA,EAAa,IAEbA,IAAe,UACfA,EAAa,IAEjBA,EAAa,CAAC,CAACA,IAGnBA,EAAa,OAEjB,IAAIC,EACJ,GAAI,CACAA,EAAgB,IAAI,OAAOR,EAAOI,GAAQH,IAAS,QAAU,IAAM,EAAE,CACzE,OAAS1B,EAAG,CACR,KAAK,SAAS,CAAE,UAAWA,EAAE,SAAS,CAAE,CAAC,EACzC,MACJ,CACA4B,EAAS,WAAWA,CAAM,GAAK,EAC/BE,EAAS,WAAWA,CAAM,GAAK,EAC/BD,GAAU,SAASA,EAAM,EAAE,GAAK,GAAK,EACjCA,EAAO,IACPA,EAAO,GAEPA,EAAO,MACPA,EAAO,KAEXL,GAAQA,GAAQ,IAAI,SAAS,EAAE,QAAQ,eAAgB,GAAG,EAC1D,IAAIU,EACJ,GAAIR,IAAS,QACTQ,EAAIV,EAAK,MAAMS,CAAa,MAE5B,IACIC,EAAID,EAAc,KAAKT,CAAI,EAC3BK,UACIA,GAAQK,GAGpB,GAAIA,EAAG,CACH,IAAIC,EAEJ,GAAIT,IAAS,UACTS,EAAS,eACFT,IAAS,QAChBS,EAASD,EAAE,OAAS,EAAIA,EAAE,CAAC,EAAIA,EAAE,CAAC,EAC9BR,IAAS,WAEJC,GAIDQ,EAASA,EAAO,QAAQ,MAAO,EAAE,EAEjCA,EAASA,EAAO,QAAQ,IAAK,GAAG,GALhCA,EAASA,EAAO,QAAQ,KAAM,EAAE,EAQpCA,EAASA,EAAO,QAAQ,MAAO,EAAE,EACjCA,EAAS,WAAWA,CAAM,EAC1BA,GAAUL,EACVK,GAAUP,OAEX,CAEH,GAAIH,EAAM,SAAS,GAAG,EAAG,CACrB,MAAMW,EAAiB,IAAI,OAAOX,CAAK,EACvCS,EAAIA,EAAE,IAAIZ,GAAM,CACZ,MAAMe,EAAKf,EAAG,MAAMc,CAAc,EAClC,OAAIC,GAAMA,EAAG,CAAC,EACHA,EAAG,CAAC,EAEJf,CAEf,CAAC,CACL,CACIS,EACAI,EAAS,KAAK,UAAUD,EAAE,IAAIZ,GAAMA,EAAG,QAAQ,YAAa,CAACgB,EAAOC,IAAQ,OAAO,aAAaA,CAAG,CAAC,CAAC,CAAC,EAEtGJ,EAAS,KAAK,UAAUD,CAAC,CAEjC,CAEIH,GAAaL,IAAS,WAEtBS,EAASA,GAAW,KAA+B,GAAKA,EAAO,SAAS,EACxEA,EAASA,EAAO,QAAQ,YAAa,CAACG,EAAOC,IAAQ,OAAO,aAAaA,CAAG,CAAC,GAGjF,KAAK,SAAS,CACV,WAAYJ,GAAW,KAA+B,GAAKA,EAC3D,YAAa,KAAK,MAAM,YAAc,CAC1C,EAAG,IAAM,CAEL,MAAMK,EAAKN,EAAE,CAAC,EAAIA,EAAE,CAAC,EAAE,QAAQA,EAAE,CAAC,CAAC,EAAI,EAEjCO,EAAK,KAAK,YAAY,QACtBC,EAAQR,EAAE,MAAQM,EAClBG,EAAMT,EAAE,MAAQM,GAAMN,EAAE,CAAC,EAAIA,EAAE,CAAC,EAAE,OAASA,EAAE,CAAC,EAAE,QACtD,GAAIO,GAAA,MAAAA,EAAI,kBAAmB,CACvBA,EAAG,MAAM,EAET,MAAMG,EAAWH,EAAG,MACpBA,EAAG,MAAQG,EAAS,UAAU,EAAGD,CAAG,EACpC,MAAME,EAASJ,EAAG,aAClBA,EAAG,UAAYI,EACfJ,EAAG,MAAQG,EACXH,EAAG,UAAYI,EAAS,GAExBJ,GAAA,MAAAA,EAAI,kBAAkBC,EAAOC,CAAG,CACpC,SAAWF,GAAA,MAAAA,EAAI,gBAAiB,CAC5B,MAAMK,EAAQL,EAAG,gBAAgB,EACjCK,EAAM,SAAS,EAAI,EACnBA,EAAM,QAAQ,YAAaH,CAAG,EAC9BG,EAAM,UAAU,YAAaJ,CAAK,EAClCI,EAAM,OAAO,CACjB,MAAWL,GAAA,MAAAA,EAAI,iBACXA,EAAG,eAAiBC,EACpBD,EAAG,aAAeE,EAE1B,CAAC,CACL,MACQjB,IAAS,UACT,KAAK,SAAS,CACV,WAAY,QACZ,YAAa,KAAK,MAAM,YAAc,CAC1C,CAAC,EAED,KAAK,SAAS,CACV,WAAYM,GAAe,KAAmC,GAAKA,EACnE,YAAa,KAAK,MAAM,YAAc,CAC1C,CAAC,CAGb,EAAGT,EAAc,EAAI,GAAI,CAC7B,CAEA,YAAa,CACT,GAAI,CAAC,KAAK,MAAM,MACZ,OAAO,kBAAC,iBAAc,IAAC,EAG3B,MAAMR,EAAY,KAAK,MAAM,MAAM,KAAKO,GAAMA,EAAG,OAAO,OAAS,QAAQ,EACnEN,EAAmB,KAAK,MAAM,MAAM,KAAKM,GAAM,CAACA,EAAG,OAAO,aAAa,EACvEL,EAAc,KAAK,MAAM,MAAM,KAAKK,GAAMA,EAAG,OAAO,OAAS,OAAO,EAE1E,OAAO,kBAAC,iBAAc,CAAC,UAAW,OAAK,EACnC,kBAAC,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAMA,KAAK,MAAM,YAAc,OAAS,OAAS,MAAM;AAAA;AAAA;AAAA,CAKtD,EACC,KAAK,iBAAiB,EACtB,KAAK,mBAAmB,EACzB,kBAAC,QAAK,CAAC,KAAK,SACR,kBAAC,YAAS,KACN,kBAAC,WAAQ,KACL,kBAAC,YAAS,CAAC,MAAO,OAAKrC,EAAO,IAAI,EAAKA,EAAO,QAAQ,CAAR,CAAY,EAC1D,kBAAC,YAAS,CAAC,MAAO,OAAKA,EAAO,IAAI,EAAKA,EAAO,SAAS,CAAT,EAAc,OAAK,EAAE,eAAe,CAAE,EACpF,kBAAC,YAAS,CAAC,MAAO,OAAKA,EAAO,IAAI,EAAKA,EAAO,OAAO,CAAP,EAAY,OAAK,EAAE,aAAa,CAAE,EAChF,kBAAC,YAAS,CAAC,MAAO,OAAKA,EAAO,IAAI,EAAKA,EAAO,MAAM,CAAN,EAAW,OAAK,EAAE,yBAAyB,CAAE,EAC3F,kBAAC,YAAS,CAAC,MAAO,OAAKA,EAAO,IAAI,EAAKA,EAAO,QAAQ,CAAR,EAAa,OAAK,EAAE,cAAc,CAAE,EACjFgC,EAAc,kBAAC,YAAS,CAAC,MAAO,OAAKhC,EAAO,IAAI,EAAKA,EAAO,OAAO,CAAP,EAAY,OAAK,EAAE,aAAa,CAAE,EAAe,KAC9G,kBAAC,YAAS,CAAC,MAAO,OAAKA,EAAO,IAAI,EAAKA,EAAO,OAAO,CAAP,EAAY,OAAK,EAAE,aAAa,CAAE,EAChF,kBAAC,YAAS,CAAC,MAAO,OAAKA,EAAO,IAAI,EAAKA,EAAO,OAAO,CAAP,EAAY,OAAK,EAAE,aAAa,CAAE,EAC/E8B,EAAY,kBAAC,YAAS,CAAC,MAAO,OAAK9B,EAAO,IAAI,EAAKA,EAAO,QAAQ,CAAR,EAAa,OAAK,EAAE,cAAc,CAAE,EAAe,KAC7G8B,EAAY,kBAAC,YAAS,CAAC,MAAO,OAAK9B,EAAO,IAAI,EAAKA,EAAO,OAAO,CAAP,EAAY,OAAK,EAAE,aAAa,CAAE,EAAe,KAC5G,kBAAC,YAAS,CAAC,MAAO,OAAKA,EAAO,IAAI,EAAKA,EAAO,gBAAgB,EAAI,MAAO,OAAK,EAAE,+DAA+D,GAAI,OAAK,EAAE,YAAY,CAAE,EACvK+B,EAAmB,kBAAC,YAAS,CAAC,MAAO,OAAK/B,EAAO,IAAI,EAAKA,EAAO,aAAa,EAAI,MAAO,OAAK,EAAE,sDAAsD,GAAI,OAAK,EAAE,aAAa,CAAE,EAAe,KAC/L8B,EAAY,kBAAC,YAAS,CAAC,MAAO,OAAK9B,EAAO,IAAI,EAAKA,EAAO,SAAS,CAAT,EAAc,OAAK,EAAE,eAAe,CAAE,EAAe,KAC/G8B,EAAY,kBAAC,YAAS,CAAC,MAAO,OAAK9B,EAAO,IAAI,EAAKA,EAAO,SAAS,CAAT,EAAc,OAAK,EAAE,eAAe,CAAE,EAAe,KAChH,kBAAC,YAAS,CAAC,MAAO,OAAKA,EAAO,IAAI,EAAKA,EAAO,WAAW,EAAI,MAAO,OAAK,EAAE,sDAAsD,GAAI,OAAK,EAAE,iBAAiB,CAAE,EAC/J,kBAAC,YAAS,CAAC,MAAO,OAAKA,EAAO,IAAI,EAAKA,EAAO,UAAU,CAAV,EAC1C,kBAAC,OACG,KAAK,QACL,MAAM,UACN,QAAS,IAAM,CACX,MAAMM,EAAQ,KAAK,MAAM,KAAK,UAAU,KAAK,MAAM,KAAK,CAAC,EACzDA,EAAM,KAAK,CACP,GAAI,GACJ,KAAM,GACN,OAAQ,CACJ,QAAS,GACT,KAAM,QACN,KAAM,SACN,KAAM,GACN,KAAM,GACN,MAAO,EACX,EACA,OAAQ,CACJ,KAAM,GACN,KAAM,EACN,MAAO,GACP,SAAU,GACV,WAAY,GACZ,cAAe,GACf,OAAQ,EACR,OAAQ,CACZ,CACJ,CAAC,EACD,KAAK,SAAS,CAAE,MAAAA,CAAM,CAAC,CAC3B,GAEA,kBAAC,MAAG,IAAC,CACT,CACJ,CACJ,CACJ,EACA,kBAAC,YAAS,KACL,KAAK,MAAM,MAAM,IAAI,CAACE,EAAMS,IAAU,KAAK,WAAWT,EAAMS,EAAOa,EAAWC,EAAkBC,CAAW,CAAC,CACjH,CACJ,CACJ,CACJ,CACJ,CAEA9B,EAAgB,UAAY,CACxB,OAAQ,WAAiB,WACzB,UAAW,WACX,UAAW,WACX,MAAO,WACP,UAAW,WACX,KAAM,WAAiB,WACvB,KAAM,WACN,OAAQ,WACR,QAAS,SACT,SAAU,QACd,ECtjCA,QAAe,CAAE,gBDwjCFA,CCxjCkB,C","sources":["ParserComponent.jsx","Components.jsx"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {\r\n    TableContainer,\r\n    TableHead,\r\n    Table,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Paper,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Button,\r\n    TextField,\r\n    Checkbox,\r\n    IconButton,\r\n    Select,\r\n    MenuItem,\r\n    LinearProgress,\r\n    Grid,\r\n    FormControlLabel,\r\n    FormControl,\r\n    InputLabel,\r\n    Fab,\r\n} from '@mui/material';\r\n\r\nimport {\r\n    Save,\r\n    Close,\r\n    Edit,\r\n    Delete,\r\n    ContentCopy,\r\n    PlayArrow,\r\n    Add,\r\n} from '@mui/icons-material';\r\n\r\n// important to make from package and not from some children.\r\n// invalid\r\n// import Confirm from '@iobroker/adapter-react-v5/Confirm';\r\n// valid\r\nimport { I18n, Confirm } from '@iobroker/adapter-react-v5';\r\nimport { ConfigGeneric } from '@iobroker/json-config';\r\n\r\nconst styles = {\r\n    table: {\r\n        minWidth: 400,\r\n    },\r\n    header: {\r\n        fontSize: 16,\r\n        fontWeight: 'bold',\r\n    },\r\n    ok: {\r\n        color: '#0ba20b'\r\n    },\r\n    warn: {\r\n        color: '#f57d1d'\r\n    },\r\n    error: {\r\n        color: '#c42c3a'\r\n    },\r\n    cell: {\r\n        padding: '6px 3px',\r\n    },\r\n    colIndex: {\r\n        width: 20,\r\n    },\r\n    colActive: {\r\n        width: 50,\r\n    },\r\n    colName: {\r\n        width: 150,\r\n    },\r\n    colUrl: {\r\n\r\n    },\r\n    colRegEx: {\r\n\r\n    },\r\n    colItem: {\r\n        width: 70,\r\n    },\r\n    colRole: {\r\n        width: 70,\r\n        textAlign: 'center',\r\n    },\r\n    colType: {\r\n        width: 70,\r\n        textAlign: 'center',\r\n    },\r\n    colComma: {\r\n        width: 50,\r\n    },\r\n    colUnit: {\r\n        width: 70,\r\n    },\r\n    colSubstituteOld: {\r\n        width: 45,\r\n        textAlign: 'center',\r\n    },\r\n    colSubstitute: {\r\n        width: 70,\r\n    },\r\n    colFactor: {\r\n        width: 50,\r\n    },\r\n    colOffset: {\r\n        width: 50,\r\n    },\r\n    colInterval: {\r\n        width: 50,\r\n    },\r\n    colButtons: {\r\n        width: 140,\r\n        textAlign: 'right',\r\n    },\r\n    changedRow: {\r\n        backgroundColor: '#795d5d',\r\n    },\r\n    marginRight: {\r\n        marginRight: 10,\r\n    },\r\n    item: {\r\n        width: 50,\r\n        marginLeft: 10,\r\n    },\r\n    regex: {\r\n        width: 'calc(100% - 100px)',\r\n    },\r\n    dialog: {\r\n        // height: 'calc(100% - 50px)',\r\n    },\r\n    testText: theme => ({\r\n        '& textarea': {\r\n            width: '100%',\r\n            height: 150,\r\n            resize: 'none',\r\n            backgroundColor: theme.palette.mode === 'dark' ? '#333' : '#fff',\r\n            color: theme.palette.mode === 'dark' ? '#fff' : '#000',\r\n        },\r\n    }),\r\n    input: {\r\n        width: 100,\r\n    },\r\n    resultUpdated: theme => ({\r\n        '& label': {\r\n            color: theme.palette.mode === 'dark' ? '#fff' : '#000',\r\n            animation: `admin-parser-blink 1000ms ease-in-out`,\r\n        },\r\n        '& input': {\r\n            color: theme.palette.mode === 'dark' ? '#fff' : '#000',\r\n            animation: `admin-parser-blink 1000ms ease-in-out`,\r\n        },\r\n    }),\r\n};\r\n\r\nclass ParserComponent extends ConfigGeneric {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showEditDialog: null,\r\n            data: JSON.parse(JSON.stringify(props.data)),\r\n            rules: null,\r\n            error: null,\r\n            showDeleteDialog: null,\r\n            testText: 'Test text',\r\n            testResult: '',\r\n            changed: [],\r\n            resultIndex: 0,\r\n            alive: false,\r\n        };\r\n        this.namespace = `${this.props.adapterName}.${this.props.instance}.`;\r\n        this.testTextRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        super.componentDidMount();\r\n        this.props.socket.getObjectViewSystem('state', this.namespace, `${this.namespace}\\u9999`)\r\n            .then(rows => this.props.socket.getState(`system.adapter.${this.namespace}alive`)\r\n                .catch(() => null)\r\n                .then(state => {\r\n                    const rules = Object.keys(rows).map(id => ({\r\n                        id,\r\n                        name: id.substring(this.namespace.length),\r\n                        common: {\r\n                            enabled: rows[id].common.enabled !== false,\r\n                            role: rows[id].common.role,\r\n                            type: rows[id].common.type,\r\n                            unit: rows[id].common.unit,\r\n                        },\r\n                        native: {\r\n                            link: rows[id].native.link,\r\n                            item: rows[id].native.item || 0,\r\n                            regex: rows[id].native.regex,\r\n                            interval: rows[id].native.interval,\r\n                            substitute: rows[id].native.substitute,\r\n                            substituteOld: rows[id].native.substituteOld,\r\n                            offset: rows[id].native.offset,\r\n                            factor: rows[id].native.factor,\r\n                            parseHtml: rows[id].native.parseHtml,\r\n                        },\r\n                    }));\r\n                    rules.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n                    this.setState({ rules, alive: state ? state.val : false });\r\n                    this.props.socket.subscribeObject(`${this.namespace}*`, this.onObjectChange);\r\n                    this.props.socket.subscribeState(`system.adapter.${this.namespace}*`, this.onAliveChange);\r\n                }));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.unsubscribeObject(`${this.namespace}*`, this.onObjectChange);\r\n        this.props.socket.unsubscribeState(`system.adapter.${this.namespace}*`, this.onAliveChange);\r\n        this.timerTest && clearTimeout(this.timerTest);\r\n        this.timerTest = null;\r\n    }\r\n\r\n    onObjectChange = (id, obj) => {\r\n        if (!id) {\r\n            return;\r\n        }\r\n        const rules = JSON.parse(JSON.stringify(this.state.rules));\r\n        const ruleIndex = rules.findIndex(rule => rule.id === id);\r\n        if (!obj) {\r\n            // delete rule\r\n            if (ruleIndex !== -1) {\r\n                rules.splice(ruleIndex, 1);\r\n                this.setState({ rules });\r\n            }\r\n        } else {\r\n            // update existing rule\r\n            if (ruleIndex !== -1) {\r\n                rules[ruleIndex] = {\r\n                    id,\r\n                    name: id.substring(this.namespace.length),\r\n                    common:        {\r\n                        enabled: obj.common.enabled !== false,\r\n                        role: obj.common.role,\r\n                        type: obj.common.type,\r\n                        unit: obj.common.unit,\r\n                    },\r\n                    native: {\r\n                        link: obj.native.link,\r\n                        item: obj.native.item || 0,\r\n                        regex: obj.native.regex,\r\n                        interval: obj.native.interval,\r\n                        substitute: obj.native.substitute,\r\n                        substituteOld: obj.native.substituteOld,\r\n                        offset: obj.native.offset,\r\n                        factor: obj.native.factor,\r\n                        parseHtml: obj.native.parseHtml,\r\n                    },\r\n                };\r\n                if (JSON.stringify(this.state.rules[ruleIndex]) === JSON.stringify(rules[ruleIndex])) {\r\n                    return;\r\n                }\r\n            } else {\r\n                // add new rule\r\n                rules.push({\r\n                    id,\r\n                    name: id.substring(this.namespace.length),\r\n                    common:        {\r\n                        enabled: obj.common.enabled !== false,\r\n                        role: obj.common.role,\r\n                        type: obj.common.type,\r\n                        unit: obj.common.unit,\r\n                    },\r\n                    native: {\r\n                        link: obj.native.link,\r\n                        item: obj.native.item || 0,\r\n                        regex: obj.native.regex,\r\n                        interval: obj.native.interval,\r\n                        substitute: obj.native.substitute,\r\n                        substituteOld: obj.native.substituteOld,\r\n                        offset: obj.native.offset,\r\n                        factor: obj.native.factor,\r\n                        parseHtml: obj.native.parseHtml,\r\n                    },\r\n                });\r\n            }\r\n            rules.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n            this.setState({ rules });\r\n        }\r\n    };\r\n\r\n    onAliveChange = (id, state) => {\r\n        if (id === `system.adapter.${this.namespace}alive` && this.state.alive !== !!state?.val) {\r\n            this.setState({ alive: !!state?.val });\r\n        }\r\n    }\r\n\r\n    requestData(link) {\r\n        if (this.state.alive) {\r\n            this.props.socket.sendTo(`${this.props.adapterName}.${this.props.instance}`, 'link', link)\r\n                .then(result => {\r\n                    if (result) {\r\n                        if (result.error) {\r\n                            window.alert(result.error);\r\n                        } else {\r\n                            this.setState({ testText: result.text || ''});\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    renderEditDialog() {\r\n        if (!this.state.showEditDialog) {\r\n            return null;\r\n        }\r\n\r\n        const rule = this.state.showEditDialog;\r\n        return <Dialog\r\n            key=\"dialog\"\r\n            maxWidth=\"lg\"\r\n            fullWidth\r\n            open={!0}\r\n            onClose={() => {}}\r\n            sx={{ '& .MuiDialog-paper': styles.dialog }}\r\n        >\r\n            <DialogTitle>\r\n                {I18n.t('parser_Test regex')}:\r\n                <span\r\n                    style={{ fontStyle: 'italic', fontWeight: 'bold', marginLeft: 10 }}\r\n                >\r\n                    {this.state.showEditDialog.name}\r\n                </span>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Grid container spacing={2}>\r\n                    <Grid item sm={12}>\r\n                        <FormControl variant=\"standard\" style={styles.marginRight}>\r\n                            <InputLabel>{I18n.t('parser_Type')}</InputLabel>\r\n                            <Select\r\n                                value={rule.common.type || 'string'}\r\n                                onChange={e => {\r\n                                    const newRule = JSON.parse(JSON.stringify(rule));\r\n                                    newRule.common.type = e.target.value;\r\n                                    this.setState({ showEditDialog: newRule }, () => this.onTest());\r\n                                }}\r\n                                variant=\"standard\"\r\n                            >\r\n                                <MenuItem value=\"boolean\">boolean</MenuItem>\r\n                                <MenuItem value=\"number\">number</MenuItem>\r\n                                <MenuItem value=\"string\">string</MenuItem>\r\n                                <MenuItem value=\"json\">json</MenuItem>\r\n                                <MenuItem value=\"array\">array</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        {rule.common.type === 'number' ?\r\n                            <FormControlLabel control={\r\n                                <Checkbox\r\n                                    checked={rule.native.substituteOld}\r\n                                    onChange={() => {\r\n                                        const newRule = JSON.parse(JSON.stringify(rule));\r\n                                        newRule.native.comma = !newRule.native.comma;\r\n                                        this.setState({ showEditDialog: newRule }, () => this.onTest());\r\n                                    }}\r\n                                />\r\n                            } label={I18n.t('parser_Comma')} /> : null}\r\n                    </Grid>\r\n                    <Grid item sm={12}>\r\n                        <FormControlLabel\r\n                            title={I18n.t('parser_If new value is not available, let old value unchanged')}\r\n                            style={styles.marginRight}\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={rule.native.substituteOld}\r\n                                    onChange={() => {\r\n                                        const newRule = JSON.parse(JSON.stringify(rule));\r\n                                        newRule.native.substituteOld = !newRule.native.substituteOld;\r\n                                        this.setState({ showEditDialog: newRule }, () => this.onTest());\r\n                                    }}\r\n                                />\r\n                            }\r\n                            label={I18n.t('parser_Substitute old value')}\r\n                        />\r\n                        {!rule.native.substituteOld ?\r\n                            <TextField\r\n                                title={I18n.t('parser_If new value is not available, use this value')}\r\n                                style={{ ...styles.marginRight, ...styles.input }}\r\n                                value={rule.native.substitute || ''}\r\n                                onChange={e => {\r\n                                    const newRule = JSON.parse(JSON.stringify(rule));\r\n                                    newRule.native.substitute = e.target.value;\r\n                                    this.setState({ showEditDialog: newRule }, () => this.onTest());\r\n                                }}\r\n                                label={I18n.t('parser_Substitute value')}\r\n                                variant=\"standard\"\r\n                            /> : null}\r\n\r\n                        {rule.common.type === 'number' ?\r\n                            <TextField\r\n                                style={{ ...styles.marginRight, ...styles.input }}\r\n                                value={rule.native.factor || 1}\r\n                                onChange={e => {\r\n                                    const newRule = JSON.parse(JSON.stringify(rule));\r\n                                    newRule.native.factor = e.target.value;\r\n                                    this.setState({ showEditDialog: newRule }, () => this.onTest());\r\n                                }}\r\n                                variant=\"standard\"\r\n                                label={I18n.t('parser_Factor')}\r\n                            /> : null}\r\n                        {rule.common.type === 'number' ?\r\n                            <TextField\r\n                                style={{ ...styles.marginRight, ...styles.input }}\r\n                                value={rule.native.offset || 0}\r\n                                onChange={e => {\r\n                                    const newRule = JSON.parse(JSON.stringify(rule));\r\n                                    newRule.native.offset = e.target.value;\r\n                                    this.setState({ showEditDialog: newRule }, () => this.onTest());\r\n                                }}\r\n                                label={I18n.t('parser_Offset')}\r\n                                variant=\"standard\"\r\n                            /> : null}\r\n                        {rule.common.type === 'string' ?\r\n                            <FormControlLabel\r\n                                title={I18n.t('parser_Convert &#48; => 0 and so on')}\r\n                                style={styles.marginRight}\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={rule.native.parseHtml}\r\n                                        onChange={() => {\r\n                                            const newRule = JSON.parse(JSON.stringify(rule));\r\n                                            newRule.native.parseHtml = !newRule.native.parseHtml;\r\n                                            this.setState({ showEditDialog: newRule }, () => this.onTest());\r\n                                        }}\r\n                                    />\r\n                                }\r\n                                label={I18n.t('parser_Parse HTML text')}\r\n                            /> : null}\r\n                    </Grid>\r\n                    <Grid item sm={12}>\r\n                        <TextField\r\n                            value={rule.native.regex || ''}\r\n                            onChange={e => {\r\n                                const newRule = JSON.parse(JSON.stringify(rule));\r\n                                newRule.native.regex = e.target.value;\r\n                                this.setState({ showEditDialog: newRule }, () => this.onTest());\r\n                            }}\r\n                            variant=\"standard\"\r\n                            style={styles.regex}\r\n                            label={I18n.t('parser_RegEx')}\r\n                        />\r\n                        {rule.common.type !== 'array' ? <TextField\r\n                            value={rule.native.item || 0}\r\n                            type=\"number\"\r\n                            min={0}\r\n                            onChange={e => {\r\n                                const newRule = JSON.parse(JSON.stringify(rule));\r\n                                newRule.native.item = e.target.value;\r\n                                this.setState({ showEditDialog: newRule }, () => this.onTest());\r\n                            }}\r\n                            variant=\"standard\"\r\n                            style={styles.item}\r\n                            label={I18n.t('parser_Item')}\r\n                        /> : null}\r\n                        <Fab\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            onClick={() => this.onTest(true)}\r\n                        >\r\n                            <PlayArrow />\r\n                        </Fab>\r\n                    </Grid>\r\n                    <Grid item sm={12} sx={styles.testText}>\r\n                        <textarea\r\n                            ref={this.testTextRef}\r\n                            value={this.state.testText}\r\n                            onChange={e => this.setState({ testText: e.target.value }, () => this.onTest())}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item sm={12}>\r\n                        <TextField\r\n                            sx={styles.resultUpdated}\r\n                            key={this.state.resultIndex}\r\n                            variant=\"standard\"\r\n                            label={I18n.t('parser_Result')}\r\n                            value={this.state.testResult.toString()}\r\n                            readOnly\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    disabled={JSON.stringify(this.state.showEditDialog) === this.state.originalRule}\r\n                    onClick={() => {\r\n                        const rules = JSON.parse(JSON.stringify(this.state.rules));\r\n                        const index = rules.findIndex(r => r.id === rule.id);\r\n                        Object.assign(rules[index].common, this.state.showEditDialog.common);\r\n                        Object.assign(rules[index].native, this.state.showEditDialog.native);\r\n                        this.setState({ showEditDialog: null, originalRule: null, rules }, () =>\r\n                            this.onAutoSave(index));\r\n                    }}\r\n                    color=\"primary\"\r\n                    startIcon={<Save />}\r\n                    variant=\"contained\"\r\n                >\r\n                    {I18n.t('ra_Save')}\r\n                </Button>\r\n                <Button\r\n                    color=\"grey\"\r\n                    onClick={() => this.setState({ showEditDialog: null, originalRule: null })}\r\n                    variant=\"contained\"\r\n                    startIcon={<Close />}\r\n                >\r\n                    {I18n.t('ra_Cancel')}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    checkError() {\r\n        // find empty ids\r\n        const errorIndex = this.state.rules.findIndex(rule => !rule.name)\r\n        if (errorIndex !== -1) {\r\n            return errorIndex;\r\n        }\r\n\r\n        // find duplicate IDs\r\n        for (let i = 0; i < this.state.rules.length; i++) {\r\n            for (let j = i + 1; j < this.state.rules.length; j++) {\r\n                if (this.state.rules[i].name === this.state.rules[j].name) {\r\n                    return j;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    onAutoSave(index) {\r\n        const changed= [...this.state.changed];\r\n        if (!changed.includes(index)) {\r\n            changed.push(index);\r\n            this.setState({ changed });\r\n        }\r\n\r\n        this.saveTimer && clearTimeout(this.saveTimer);\r\n        this.saveTimer = setTimeout(async () => {\r\n            this.saveTimer = null;\r\n            for (let c = 0; c < this.state.changed.length; c++) {\r\n                const _index = this.state.changed[c];\r\n                const rule = this.state.rules[_index];\r\n\r\n                if (rule.name && !this.state.rules.find((r, i) => r.name === rule.name && i !== _index)) {\r\n                    const originalObj = rule.id ? await this.props.socket.getObject(rule.id) : { common: {}, native: {}, type: 'state' };\r\n                    const obj = JSON.parse(JSON.stringify(originalObj));\r\n                    Object.assign(obj.common, rule.common);\r\n                    Object.assign(obj.native, rule.native);\r\n\r\n                    // if name changed\r\n                    if (rule.id !== `${this.namespace}${rule.name}`) {\r\n                        rule.id && (await this.props.socket.delObject(rule.id));\r\n                        await this.props.socket.setObject(`${this.namespace}${rule.name}`, obj);\r\n                    } else {\r\n                        if (JSON.stringify(originalObj.common) !== JSON.stringify(obj.common) ||\r\n                            JSON.stringify(originalObj.native) !== JSON.stringify(obj.native)\r\n                        ) {\r\n                            await this.props.socket.setObject(rule.id, obj);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.setState({ changed: [] });\r\n        }, 1000);\r\n    }\r\n\r\n    _onChange(index, isNative, attr, value) {\r\n        const rules = JSON.parse(JSON.stringify(this.state.rules));\r\n        const subName = isNative ? 'native' : 'common';\r\n        if (attr === 'comma') {\r\n            rules[index].common.type = 'number';\r\n        }\r\n        rules[index][subName][attr] = value;\r\n        this.setState({ rules }, () => this.onAutoSave(index));\r\n    }\r\n\r\n    renderRule(rule, index, anyNumber, anySubstituteOld, anyNotArray) {\r\n        const error = !rule.name || this.state.rules.find((r, i) => r.name === rule.name && i !== index)\r\n\r\n        return <TableRow\r\n            key={`${index}_${rule.id}`}\r\n            style={this.state.changed.includes(index) ? styles.changedRow : undefined}\r\n        >\r\n            <TableCell style={styles.cell}>{index + 1}</TableCell>\r\n            <TableCell style={styles.cell}>\r\n                <Checkbox\r\n                    disabled={error}\r\n                    checked={rule.common.enabled}\r\n                    onChange={e => this._onChange(index, false, 'enabled', e.target.checked)}\r\n                />\r\n            </TableCell>\r\n            <TableCell style={styles.cell}>\r\n                <TextField\r\n                    fullWidth\r\n                    value={rule.name}\r\n                    error={!!error}\r\n                    disabled={!rule.common.enabled}\r\n                    onChange={e => {\r\n                        const rules = JSON.parse(JSON.stringify(this.state.rules));\r\n                        rules[index].name = e.target.value;\r\n                        const error = this.checkError();\r\n                        this.setState({ rules, error }, () => this.onAutoSave(index));\r\n                    }}\r\n                    variant=\"standard\"\r\n                />\r\n            </TableCell>\r\n            <TableCell style={styles.cell}>\r\n                <TextField\r\n                    fullWidth\r\n                    disabled={error || !rule.common.enabled}\r\n                    value={rule.native.link}\r\n                    onChange={e => this._onChange(index, true, 'link', e.target.value)}\r\n                    variant=\"standard\"\r\n                />\r\n            </TableCell>\r\n            <TableCell style={styles.cell}>\r\n                <TextField\r\n                    disabled={error || !rule.common.enabled}\r\n                    fullWidth\r\n                    value={rule.native.regex}\r\n                    onChange={e => this._onChange(index, true, 'regex', e.target.value)}\r\n                    variant=\"standard\"\r\n                />\r\n            </TableCell>\r\n            {anyNotArray ? <TableCell style={styles.cell}>\r\n                {rule.common.type !== 'array' ? <TextField\r\n                    fullWidth\r\n                    disabled={error || !rule.common.enabled}\r\n                    value={rule.native.item}\r\n                    type=\"number\"\r\n                    onChange={e => this._onChange(index, true, 'item', e.target.value)}\r\n                    variant=\"standard\"\r\n                /> : null}\r\n            </TableCell> : null}\r\n            <TableCell style={styles.cell}>\r\n                <Select\r\n                    fullWidth\r\n                    disabled={error || !rule.common.enabled}\r\n                    value={rule.common.role || ''}\r\n                    onChange={e => this._onChange(index, false, 'role', e.target.value)}\r\n                    variant=\"standard\"\r\n                >\r\n                    <MenuItem value=\"state\">default</MenuItem>\r\n                    <MenuItem value=\"\">custom</MenuItem>\r\n                    <MenuItem value=\"temperature\">temperature</MenuItem>\r\n                    <MenuItem value=\"value\">value</MenuItem>\r\n                    <MenuItem value=\"blinds\">blinds</MenuItem>\r\n                    <MenuItem value=\"switch\">switch</MenuItem>\r\n                    <MenuItem value=\"indicator\">indicator</MenuItem>\r\n                </Select>\r\n            </TableCell>\r\n            <TableCell style={styles.cell}>\r\n                <Select\r\n                    fullWidth\r\n                    disabled={error || !rule.common.enabled}\r\n                    value={rule.common.type || 'string'}\r\n                    onChange={e => this._onChange(index, false, 'type', e.target.value)}\r\n                    variant=\"standard\"\r\n                >\r\n                    <MenuItem value=\"boolean\">boolean</MenuItem>\r\n                    <MenuItem value=\"number\">number</MenuItem>\r\n                    <MenuItem value=\"string\">string</MenuItem>\r\n                    <MenuItem value=\"json\">json</MenuItem>\r\n                </Select>\r\n            </TableCell>\r\n            {anyNumber ? <TableCell style={styles.cell}>\r\n                {rule.common.type === 'number' ?\r\n                    <Checkbox\r\n                        disabled={error || !rule.common.enabled}\r\n                        checked={!!rule.native.comma}\r\n                        onChange={e => this._onChange(index, true, 'comma', e.target.checked)}\r\n                    /> : null}\r\n            </TableCell> : null}\r\n            {anyNumber ? <TableCell style={styles.cell}>\r\n                <TextField\r\n                    fullWidth\r\n                    disabled={error || !rule.common.enabled}\r\n                    value={rule.common.unit}\r\n                    onChange={e => this._onChange(index, false, 'unit', e.target.value)}\r\n                    variant=\"standard\"\r\n                />\r\n            </TableCell> : null}\r\n            <TableCell\r\n                style={styles.cell}\r\n                title={I18n.t('parser_If new value is not available, let old value unchanged')}\r\n            >\r\n                <Checkbox\r\n                    disabled={error || !rule.common.enabled}\r\n                    checked={rule.native.substituteOld}\r\n                    onChange={e => this._onChange(index, true, 'substituteOld', e.target.checked)}\r\n                />\r\n            </TableCell\r\n            >\r\n            {anySubstituteOld ? <TableCell\r\n                title={I18n.t('parser_If new value is not available, use this value')}\r\n                style={styles.cell}\r\n            >\r\n                {!rule.native.substituteOld ?\r\n                    <TextField\r\n                        disabled={error || !rule.common.enabled}\r\n                        fullWidth\r\n                        value={rule.native.substituteOld ? '' : rule.native.substitute}\r\n                        onChange={e => this._onChange(index, true, 'substitute', e.target.value)}\r\n                        variant=\"standard\"\r\n                    /> : null}\r\n            </TableCell> : null}\r\n            {anyNumber ? <TableCell style={styles.cell}>\r\n                {rule.common.type === 'number' ?\r\n                    <TextField\r\n                        disabled={error || !rule.common.enabled}\r\n                        fullWidth\r\n                        value={rule.native.factor}\r\n                        onChange={e => this._onChange(index, true, 'factor', e.target.value)}\r\n                        variant=\"standard\"\r\n                    /> : null}\r\n            </TableCell> : null}\r\n            {anyNumber ? <TableCell style={styles.cell}>\r\n                {rule.common.type === 'number' ?\r\n                    <TextField\r\n                        disabled={error || !rule.common.enabled}\r\n                        fullWidth\r\n                        value={rule.native.offset}\r\n                        onChange={e => this._onChange(index, true, 'offset', e.target.value)}\r\n                        variant=\"standard\"\r\n                    /> : null}\r\n            </TableCell> : null}\r\n            <TableCell\r\n                title={I18n.t('parser_Leave it empty if default interval is desired')}\r\n                style={styles.cell}\r\n            >\r\n                <TextField\r\n                    disabled={error || !rule.common.enabled}\r\n                    fullWidth\r\n                    value={rule.native.interval}\r\n                    type=\"number\"\r\n                    onChange={e => this._onChange(index, true, 'interval', e.target.value)}\r\n                    variant=\"standard\"\r\n                />\r\n            </TableCell>\r\n            <TableCell style={styles.cell}>\r\n                <IconButton\r\n                    size=\"small\"\r\n                    disabled={error || !rule.common.enabled}\r\n                    onClick={() =>\r\n                        this.setState({\r\n                            showEditDialog: JSON.parse(JSON.stringify(this.state.rules[index])), originalRule: JSON.stringify(this.state.rules[index]),\r\n                        }, () => this.requestData(this.state.rules[index].native.link))}\r\n                >\r\n                    <Edit />\r\n                </IconButton>\r\n                <IconButton\r\n                    size=\"small\"\r\n                    onClick={() => this.setState({ showDeleteDialog: index })}\r\n                >\r\n                    <Delete />\r\n                </IconButton>\r\n                <IconButton\r\n                    size=\"small\"\r\n                    disabled={error || !rule.common.enabled}\r\n                    onClick={async () => {\r\n                        const cloned = JSON.parse(JSON.stringify(this.state.rules[index]));\r\n                        let i = 1;\r\n                        let text = cloned.name;\r\n                        const pattern = text.match(/(\\d+)$/);\r\n                        if (pattern) {\r\n                            text = text.replace(pattern[0], '');\r\n                            i = parseInt(pattern[0], 10) + 1;\r\n                        } else {\r\n                            text += '_';\r\n                        }\r\n                        while (this.state.rules.find(it => it[this.props.schema.clone] === text + i.toString())) {\r\n                            i++;\r\n                        }\r\n                        cloned.name = text + i.toString();\r\n                        cloned.id = `${this.namespace}${cloned.name}`;\r\n\r\n                        await this.props.socket.setObject(`${this.namespace}${cloned.name}`, {\r\n                            type: 'state',\r\n                            common: rule.common,\r\n                            native: rule.native,\r\n                        });\r\n                    }}\r\n                >\r\n                    <ContentCopy />\r\n                </IconButton>\r\n            </TableCell>\r\n        </TableRow>;\r\n    }\r\n\r\n    renderDeleteDialog() {\r\n        if (this.state.showDeleteDialog === null) {\r\n            return null;\r\n        }\r\n        return <Confirm\r\n            text={I18n.t('parser_Delete rule')}\r\n            ok={I18n.t('ra_Delete')}\r\n            onClose={async result => {\r\n\r\n                if (result) {\r\n                    const id = this.state.rules[this.state.showDeleteDialog].id;\r\n                    const rules = JSON.parse(JSON.stringify(this.state.rules));\r\n                    rules.splice(this.state.showDeleteDialog, 1);\r\n                    this.setState({ rules, showDeleteDialog: null }, async () => {\r\n                        id && (await this.props.socket.delObject(id));\r\n                    });\r\n                } else {\r\n                    this.setState({ showDeleteDialog: null });\r\n                }\r\n            }}\r\n        />\r\n    }\r\n\r\n    onTest(immediately) {\r\n        this.timerTest && clearTimeout(this.timerTest);\r\n        this.timerTest = setTimeout(() => {\r\n            let test       = this.state.testText;\r\n            let regex      = this.state.showEditDialog.native.regex;\r\n            let type       = this.state.showEditDialog.common.type\r\n            let comma      = this.state.showEditDialog.native.comma;\r\n            let offset     = this.state.showEditDialog.native.offset;\r\n            let item       = this.state.showEditDialog.native.item;\r\n            let factor     = this.state.showEditDialog.native.factor;\r\n            let parseHtml     = this.state.showEditDialog.native.parseHtml === 'true' || this.state.showEditDialog.native.parseHtml === true;\r\n            let substitute = this.state.showEditDialog.native.substitute;\r\n\r\n            if (!regex) {\r\n                regex = '.+';\r\n            }\r\n\r\n            if (regex[0] === '/') {\r\n                regex = regex.substring(1, regex.length - 1);\r\n            }\r\n\r\n            if (substitute !== '' && substitute !== undefined && substitute !== null) {\r\n                if (substitute === 'null')  {\r\n                    substitute = null;\r\n                }\r\n\r\n                if (type === 'number') {\r\n                    substitute = parseFloat(substitute) || 0;\r\n                } else if (type === 'boolean') {\r\n                    if (substitute === 'true')  {\r\n                        substitute = true;\r\n                    }\r\n                    if (substitute === 'false') {\r\n                        substitute = false;\r\n                    }\r\n                    substitute = !!substitute;\r\n                }\r\n            } else {\r\n                substitute = undefined;\r\n            }\r\n            let regExpression;\r\n            try {\r\n                regExpression = new RegExp(regex, item || type === 'array' ? 'g' : '');\r\n            } catch (e) {\r\n                this.setState({ testError: e.toString() });\r\n                return;\r\n            }\r\n            offset = parseFloat(offset) || 0;\r\n            factor = parseFloat(factor) || 1;\r\n            item   = (parseInt(item, 10) || 0) + 1;\r\n            if (item < 0) {\r\n                item = 1;\r\n            }\r\n            if (item > 1000) {\r\n                item = 1000;\r\n            }\r\n            test = (test || '').toString().replace(/\\r\\n|[\\r\\n]/g, ' ');\r\n            let m;\r\n            if (type === 'array') {\r\n                m = test.match(regExpression);\r\n            } else {\r\n                do {\r\n                    m = regExpression.exec(test);\r\n                    item--;\r\n                } while(item && m);\r\n            }\r\n\r\n            if (m) {\r\n                let newVal;\r\n\r\n                if (type === 'boolean') {\r\n                    newVal = 'true';\r\n                } else if (type !== 'array') {\r\n                    newVal = m.length > 1 ? m[1] : m[0];\r\n                    if (type === 'number') {\r\n                        // 1,000,000 => 1000000\r\n                        if (!comma) {\r\n                            newVal = newVal.replace(/,/g, '');\r\n                        } else {\r\n                            // 1.000.000 => 1000000\r\n                            newVal = newVal.replace(/\\./g, '');\r\n                            // 5,67 => 5.67\r\n                            newVal = newVal.replace(',', '.');\r\n                        }\r\n                        // 1 000 000 => 1000000\r\n                        newVal = newVal.replace(/\\s/g, '');\r\n                        newVal = parseFloat(newVal);\r\n                        newVal *= factor;\r\n                        newVal += offset;\r\n                    }\r\n                } else {\r\n                    // extract from string the value\r\n                    if (regex.includes('(')) {\r\n                        const _regExpression = new RegExp(regex);\r\n                        m = m.map(it => {\r\n                            const _m = it.match(_regExpression);\r\n                            if (_m && _m[1]) {\r\n                                return _m[1];\r\n                            } else {\r\n                                return it;\r\n                            }\r\n                        });\r\n                    }\r\n                    if (parseHtml) {\r\n                        newVal = JSON.stringify(m.map(it => it.replace(/&#(\\d+);/g, (match, dec) => String.fromCharCode(dec))));\r\n                    } else {\r\n                        newVal = JSON.stringify(m);\r\n                    }\r\n                }\r\n\r\n                if (parseHtml && type === 'string') {\r\n                    // replace &#48 with 0 and so on\r\n                    newVal = newVal === null || newVal === undefined ? '' : newVal.toString();\r\n                    newVal = newVal.replace(/&#(\\d+);/g, (match, dec) => String.fromCharCode(dec));\r\n                }\r\n\r\n                this.setState({\r\n                    testResult: newVal === null || newVal === undefined ? '' : newVal,\r\n                    resultIndex: this.state.resultIndex + 1,\r\n                }, () => {\r\n                    // find position of the text\r\n                    const ll = m[1] ? m[0].indexOf(m[1]) : 0;\r\n                    // highlight text\r\n                    const el = this.testTextRef.current;\r\n                    const start = m.index + ll;\r\n                    const end = m.index + ll + (m[1] ? m[1].length : m[0].length);\r\n                    if (el?.setSelectionRange) {\r\n                        el.focus();\r\n\r\n                        const fullText = el.value;\r\n                        el.value = fullText.substring(0, end);\r\n                        const height = el.scrollHeight;\r\n                        el.scrollTop = height;\r\n                        el.value = fullText;\r\n                        el.scrollTop = height - 30;\r\n\r\n                        el?.setSelectionRange(start, end);\r\n                    } else if (el?.createTextRange) {\r\n                        const range = el.createTextRange();\r\n                        range.collapse(true);\r\n                        range.moveEnd('character', end);\r\n                        range.moveStart('character', start);\r\n                        range.select();\r\n                    } else if (el?.selectionStart) {\r\n                        el.selectionStart = start;\r\n                        el.selectionEnd = end;\r\n                    }\r\n                });\r\n            } else {\r\n                if (type === 'boolean') {\r\n                    this.setState({\r\n                        testResult: 'false',\r\n                        resultIndex: this.state.resultIndex + 1,\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        testResult: substitute === null || substitute === undefined ? '' : substitute,\r\n                        resultIndex: this.state.resultIndex + 1,\r\n                    });\r\n                }\r\n            }\r\n        }, immediately ? 0 : 1000);\r\n    }\r\n\r\n    renderItem() {\r\n        if (!this.state.rules) {\r\n            return <LinearProgress />;\r\n        }\r\n\r\n        const anyNumber = this.state.rules.find(it => it.common.type === 'number');\r\n        const anySubstituteOld = this.state.rules.find(it => !it.native.substituteOld);\r\n        const anyNotArray = this.state.rules.find(it => it.common.type !== 'array');\r\n\r\n        return <TableContainer component={Paper}>\r\n            <style>\r\n                {`\r\n@keyframes admin-parser-blink {\r\n    0% {\r\n        color: #00FF00;\r\n    }\r\n    100% {\r\n        color: ${this.props.themeType === 'dark' ? '#fff' : '#000'};\r\n    }\r\n}\r\n`}\r\n\r\n            </style>\r\n            {this.renderEditDialog()}\r\n            {this.renderDeleteDialog()}\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell style={{ ...styles.cell, ...styles.colIndex }}></TableCell>\r\n                        <TableCell style={{ ...styles.cell, ...styles.colActive }}>{I18n.t('parser_Active')}</TableCell>\r\n                        <TableCell style={{ ...styles.cell, ...styles.colName }}>{I18n.t('parser_Name')}</TableCell>\r\n                        <TableCell style={{ ...styles.cell, ...styles.colUrl }}>{I18n.t('parser_URL or file name')}</TableCell>\r\n                        <TableCell style={{ ...styles.cell, ...styles.colRegEx }}>{I18n.t('parser_RegEx')}</TableCell>\r\n                        {anyNotArray ? <TableCell style={{ ...styles.cell, ...styles.colItem }}>{I18n.t('parser_Item')}</TableCell> : null}\r\n                        <TableCell style={{ ...styles.cell, ...styles.colRole }}>{I18n.t('parser_Role')}</TableCell>\r\n                        <TableCell style={{ ...styles.cell, ...styles.colType }}>{I18n.t('parser_Type')}</TableCell>\r\n                        {anyNumber ? <TableCell style={{ ...styles.cell, ...styles.colComma }}>{I18n.t('parser_Comma')}</TableCell> : null}\r\n                        {anyNumber ? <TableCell style={{ ...styles.cell, ...styles.colUnit }}>{I18n.t('parser_Unit')}</TableCell> : null}\r\n                        <TableCell style={{ ...styles.cell, ...styles.colSubstituteOld }} title={I18n.t('parser_If new value is not available, let old value unchanged')}>{I18n.t('parser_Old')}</TableCell>\r\n                        {anySubstituteOld ? <TableCell style={{ ...styles.cell, ...styles.colSubstitute }} title={I18n.t('parser_If new value is not available, use this value')}>{I18n.t('parser_Subs')}</TableCell> : null}\r\n                        {anyNumber ? <TableCell style={{ ...styles.cell, ...styles.colFactor }}>{I18n.t('parser_Factor')}</TableCell> : null}\r\n                        {anyNumber ? <TableCell style={{ ...styles.cell, ...styles.colOffset }}>{I18n.t('parser_Offset')}</TableCell> : null}\r\n                        <TableCell style={{ ...styles.cell, ...styles.colInterval }} title={I18n.t('parser_Leave it empty if default interval is desired')}>{I18n.t('parser_Interval')}</TableCell>\r\n                        <TableCell style={{ ...styles.cell, ...styles.colButtons }}>\r\n                            <Fab\r\n                                size=\"small\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                    const rules = JSON.parse(JSON.stringify(this.state.rules));\r\n                                    rules.push({\r\n                                        id: '',\r\n                                        name: '',\r\n                                        common: {\r\n                                            enabled: true,\r\n                                            role: 'state',\r\n                                            type: 'string',\r\n                                            unit: '',\r\n                                            read: true,\r\n                                            write: false,\r\n                                        },\r\n                                        native: {\r\n                                            link: '',\r\n                                            item: 0,\r\n                                            regex: '',\r\n                                            interval: '',\r\n                                            substitute: '',\r\n                                            substituteOld: true,\r\n                                            offset: 0,\r\n                                            factor: 1,\r\n                                        },\r\n                                    });\r\n                                    this.setState({ rules });\r\n                                }}\r\n                            >\r\n                                <Add />\r\n                            </Fab>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {this.state.rules.map((rule, index) => this.renderRule(rule, index, anyNumber, anySubstituteOld, anyNotArray))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>;\r\n    }\r\n}\r\n\r\nParserComponent.propTypes = {\r\n    socket: PropTypes.object.isRequired,\r\n    themeType: PropTypes.string,\r\n    themeName: PropTypes.string,\r\n    style: PropTypes.object,\r\n    className: PropTypes.string,\r\n    data: PropTypes.object.isRequired,\r\n    attr: PropTypes.string,\r\n    schema: PropTypes.object,\r\n    onError: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n};\r\n\r\nexport default ParserComponent;\r\n","import ParserComponent from './ParserComponent';\r\n\r\nexport default { ParserComponent };"],"names":["styles","theme","ParserComponent","props","id","obj","rules","ruleIndex","rule","a","b","state","rows","link","result","e","newRule","index","errorIndex","i","j","changed","c","_index","r","originalObj","isNative","attr","value","subName","anyNumber","anySubstituteOld","anyNotArray","error","cloned","text","pattern","it","immediately","test","regex","type","comma","offset","item","factor","parseHtml","substitute","regExpression","m","newVal","_regExpression","_m","match","dec","ll","el","start","end","fullText","height","range"],"sourceRoot":""}